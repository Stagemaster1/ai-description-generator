rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only access their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Additional security checks for write operations
      allow write: if request.auth != null && 
        request.auth.uid == userId &&
        request.auth.token.email_verified == true &&
        validateUserData(request.resource.data);
    }
    
    // Admin access requires proper authentication and admin role
    match /admin_logs/{document} {
      allow read, write: if request.auth != null && 
        request.auth.token.admin == true &&
        request.auth.token.email_verified == true;
    }
    
    // Deleted users archive - admin access only
    match /deleted_users/{document} {
      allow read, write: if request.auth != null && 
        request.auth.token.admin == true &&
        request.auth.token.email_verified == true;
    }
    
    // Public data - read-only access for authenticated users
    match /public/{document=**} {
      allow read: if request.auth != null;
      allow write: if false; // No writes allowed to public data
    }
    
    // Analytics data - admin access only
    match /analytics/{document=**} {
      allow read, write: if request.auth != null && 
        request.auth.token.admin == true &&
        request.auth.token.email_verified == true;
    }
    
    // Rate limiting logs - admin access only
    match /rate_limits/{document=**} {
      allow read, write: if request.auth != null && 
        request.auth.token.admin == true &&
        request.auth.token.email_verified == true;
    }
    
    // System logs - admin access only
    match /system_logs/{document=**} {
      allow read, write: if request.auth != null &&
        request.auth.token.admin == true &&
        request.auth.token.email_verified == true;
    }

    // SESSION MANAGEMENT COLLECTIONS - Enterprise Stateless Session System

    // User sessions - users can only access their own sessions
    match /userSessions/{sessionId} {
      allow read: if request.auth != null &&
        resource.data.userId == request.auth.uid &&
        request.auth.token.email_verified == true;

      // Only server-side functions can write sessions (using admin SDK)
      allow write: if false; // All session writes handled by server functions
    }

    // Session audit logs - admin access only for monitoring
    match /sessionAuditLog/{auditId} {
      allow read: if isAdmin();
      allow write: if false; // Server-side writes only
    }

    // Session activity logs - admin access only
    match /sessionActivity/{activityId} {
      allow read: if isAdmin();
      allow write: if false; // Server-side writes only
    }

    // Concurrent sessions tracking - users can read their own session counts
    match /concurrentSessions/{userId} {
      allow read: if request.auth != null &&
        request.auth.uid == userId &&
        request.auth.token.email_verified == true;
      allow write: if false; // Server-side writes only
    }

    // Session security events - admin access only
    match /sessionSecurityEvents/{eventId} {
      allow read: if isAdmin();
      allow write: if false; // Server-side writes only
    }

    // EXISTING DISTRIBUTED AUTHENTICATION COLLECTIONS

    // Token validation state - server-side access only
    match /tokenValidationState/{tokenHash} {
      allow read, write: if false; // Server-side only via admin SDK
    }

    // Distributed locks - server-side access only
    match /distributedLocks/{lockId} {
      allow read, write: if false; // Server-side only via admin SDK
    }

    // Validation audit log - admin access only
    match /validationAuditLog/{auditId} {
      allow read: if isAdmin();
      allow write: if false; // Server-side writes only
    }

    // Security incidents - admin access only
    match /securityIncidents/{incidentId} {
      allow read: if isAdmin();
      allow write: if false; // Server-side writes only
    }

    // Rate limits - server-side access only
    match /rateLimits/{limitId} {
      allow read, write: if false; // Server-side only via admin SDK
    }

    // Auth failures tracking - server-side access only
    match /authFailures/{failureId} {
      allow read, write: if false; // Server-side only via admin SDK
    }

    // Auth metrics - admin access only
    match /authMetrics/{metricId} {
      allow read: if isAdmin();
      allow write: if false; // Server-side writes only
    }

    // Deny access to all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
  
  // Helper function to validate user data structure
  function validateUserData(data) {
    return data.keys().hasAll(['email', 'subscriptionType', 'monthlyUsage', 'maxUsage']) &&
           data.email is string &&
           data.subscriptionType in ['free', 'starter', 'professional', 'enterprise'] &&
           data.monthlyUsage is number &&
           data.maxUsage is number &&
           data.monthlyUsage >= 0 &&
           data.maxUsage >= 0;
  }
  
  // Helper function to check if user is admin
  function isAdmin() {
    return request.auth != null && 
           request.auth.token.admin == true &&
           request.auth.token.email_verified == true;
  }
  
  // Helper function to check if user owns the resource
  function isOwner(userId) {
    return request.auth != null && 
           request.auth.uid == userId &&
           request.auth.token.email_verified == true;
  }
}